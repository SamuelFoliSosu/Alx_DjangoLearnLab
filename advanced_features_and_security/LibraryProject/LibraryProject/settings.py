"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Specify your custom user model as the default for the project
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Settings for media files (needed for profile_photo ImageField)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Make sure BASE_DIR is defined (it usually is)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-071b^((t1ui-p-fsedqz^zud*-7itdw0w&^&=#(*$5odi73yc#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    # 'relationship_app.apps.RelationshipAppConfig'
    
    # For Content Security Policy (django-csp) - will install later
    'csp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Add CSP middleware here (for Step 4)
    'csp.middleware.CSPMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Redirect URLs
LOGIN_REDIRECT_URL = '/app/books/'  # Redirect to the book list after successful login
LOGOUT_REDIRECT_URL = '/app/login/' # Redirect to the login page after successful logout

# --- CONTINUED SECURITY CONFIGURATION ---

# --- HTTPS AND SECURE HEADERS CONFIGURATION (Task 3) ---

# Step 1: Configure Django for HTTPS Support
# Redirects all non-HTTPS requests to HTTPS. Essential for production.
SECURE_SSL_REDIRECT = True
# Tells browsers to only connect via HTTPS for the specified time (in seconds).
# 31536000 seconds = 1 year. This is a strong security measure.
SECURE_HSTS_SECONDS = 31536000
# Includes subdomains in the HSTS policy.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# Allows domain to be submitted to browser HSTS preload lists (requires strict adherence).
SECURE_HSTS_PRELOAD = True

# When running behind a reverse proxy (e.g., Nginx, Apache), Django needs to know
# that the request is secure. The proxy adds a header like 'X-Forwarded-Proto'.
# Configure this if SECURE_SSL_REDIRECT = True and you're behind a proxy.
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Step 2: Enforce Secure Cookies
# Ensures CSRF cookie is only sent over HTTPS.
CSRF_COOKIE_SECURE = True
# Ensures session cookie is only sent over HTTPS.
SESSION_COOKIE_SECURE = True
# Ensure this too for general cookies.
# SESSION_COOKIE_SAMESITE = 'Lax' # Recommended for modern browsers


# Step 3: Implement Secure Headers
# Prevents clickjacking by disallowing embedding of your site in iframes.
# 'DENY' completely prevents embedding. 'SAMEORIGIN' allows embedding on your own domain.
X_FRAME_OPTIONS = 'DENY'
# Prevents browsers from MIME-sniffing a response away from the declared Content-Type.
SECURE_CONTENT_TYPE_NOSNIFF = True
# Enables browser's built-in XSS filter. Note: Browsers are deprecating this. CSP is better.
SECURE_BROWSER_XSS_FILTER = True
# --- END SECURITY CONFIGURATION --- 


# --- Content Security Policy (CSP) Configuration (Updated for django-csp >= 4.0) ---
CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'base-uri': ("'self'",),
        'connect-src': ("'self'",),
        'default-src': ("'self'",),
        'font-src': ("'self'",),
        'form-action': ("'self'",),
        'frame-ancestors': ("'self'",),
        'img-src': ("'self'", 'data:'),
        'object-src': ("'none'",),
        'script-src': ("'self'",),
        'style-src': ("'self'",),
    }
    # You can also add 'REPORT_ONLY': True or 'REPORT_URI': '/csp-report/' here if needed
    # 'REPORT_ONLY': True, # For testing, sends reports to console/report_uri without blocking
    # 'REPORT_URI': '/csp-report/', # Endpoint for CSP violation reports
}